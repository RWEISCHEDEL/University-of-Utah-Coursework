import java.util.ArrayList;
import java.util.Collections;
import java.util.TreeSet;

/**
 * 
 * @author weisched
 *
 */
public class A1TreeSetTimingExperiment {

	/**
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		
				long start, stop;
				
				TreeSet<Integer> tree = new TreeSet<Integer>();
				
				ArrayList<Integer> randomFill = new ArrayList<Integer>();
				
				int size = (int) Math.pow(2, 18);
						
				for(int i = 0; i < size; i++){
					
					randomFill.add(i);
					
				}
				
				Collections.shuffle(randomFill);
				
				for(int i = 0; i < randomFill.size(); i++){
					tree.add(randomFill.get(i));
				}
				
				for (int elt = 0; elt < size; elt++)
		        {
		            tree.contains(elt);
		        }
				
				double elapsed = 0;
				
				long repetitions = 1;
				
				 do
		         {
		             repetitions *= 2;
		             
		             start = System.currentTimeMillis();
		             for (int i = 0; i < repetitions; i++)
		             {
		                 for (int elt = 0; elt < size; elt++)
		                 {
		                     tree.contains(elt);
		                 }
		            	 
		            	 
		             }
		             stop = System.currentTimeMillis();
		             elapsed = elapsed + (stop - start);
		         } while (elapsed < 1000);
		         double totalAverage = elapsed / repetitions;
		         
		         
		         elapsed = 0;
		         repetitions = 1;
		         do
		         {
		             repetitions *= 2;
		             start = System.currentTimeMillis();
		             for (int i = 0; i < repetitions; i++)
		             {
		                 for (int elt = 0; elt < size; elt++)
		                 {
		                     
		                 }
		             }
		             stop = System.currentTimeMillis();
		             elapsed = elapsed + (stop - start);
		         } while (elapsed < 1000);
		         double overheadAverage = elapsed / repetitions;
		         
		         
		         
		         System.out.println(((totalAverage - overheadAverage) / size) * 1000);
			

		


	}

}
