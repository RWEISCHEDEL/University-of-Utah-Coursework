/*
 * Robert Weischedel
 * CS 4400
 * 12/5/16
 *
 * tinychat.c - [Starting code for] a web-based chat server.
 *
 * Based on:
 *  tiny.c - A simple, iterative HTTP/1.0 Web server that uses the
 *      GET method to serve static and dynamic content.
 *   Tiny Web server
 *   Dave O'Hallaron
 *   Carnegie Mellon University
 */
#include "csapp.h"
#include "dictionary.h"
#include "more_string.h"

void * doit(void * fdptr);
dictionary_t *read_requesthdrs(rio_t *rp);
void read_postquery(rio_t *rp, dictionary_t *headers, dictionary_t *d);
void parse_query(const char *uri, dictionary_t *d);
void serve_form(int fd, const char *pre_content);
void clienterror(int fd, char *cause, char *errnum, char *shortmsg, char *longmsg);

// The methods that I created
static int appendToConv(dictionary_t *d);
static void serveTopic(int fd, dictionary_t *query);
static int serveConv(int fd, dictionary_t *query);
static int serveImport(dictionary_t *query);
static void print_stringdictionary(dictionary_t *d);

// The global variables for the lock and the conversation dictionary.
static dictionary_t * convos;
static pthread_mutex_t lock;

int main(int argc, char **argv) 
{
  int listenfd, connfd;
  char hostname[MAXLINE], port[MAXLINE];
  socklen_t clientlen;
  struct sockaddr_storage clientaddr;

  /* Check command line args */
  if (argc != 2) {
    fprintf(stderr, "usage: %s <port>\n", argv[0]);
    exit(1);
  }

  listenfd = Open_listenfd(argv[1]);

  /* Don't kill the server if there's an error, because
     we want to survive errors due to a client. But we
     do want to report errors. */
  exit_on_error(0);

  /* Also, don't stop on broken connections: */
  Signal(SIGPIPE, SIG_IGN);

  // Initialize the lock that we will use to lock convos.
  pthread_mutex_init(&lock, NULL);
  // Make the convos dictionary.
  convos = make_dictionary(COMPARE_CASE_SENS, free);

  while (1) {
    clientlen = sizeof(clientaddr);
    connfd = Accept(listenfd, (SA *)&clientaddr, &clientlen);
    if (connfd >= 0) {
      Getnameinfo((SA *) &clientaddr, clientlen, hostname, MAXLINE, port, MAXLINE, 0);
      pthread_t th;

      int *fd = (int *)malloc(sizeof(int));
      *(int *)(fd) = connfd;
      Pthread_create(&th, NULL, doit, fd);
    }
  }

  pthread_mutex_destroy(&lock);
}

/*
 * doit - handle one HTTP request/response transaction
 */
void * doit(void * fdptr)
{
  int * tmp = (int *)fdptr;
  int fd = tmp[0];
  char buf[MAXLINE], *method, *uri, *version;
  rio_t rio;
  dictionary_t *headers, *query;

  /* Read request line and headers */
  Rio_readinitb(&rio, fd);
  if (Rio_readlineb(&rio, buf, MAXLINE) <= 0){
    Close(fd);
    return NULL;
  }
  printf("%s", buf);
  
  if (!parse_request_line(buf, &method, &uri, &version)) {
    clienterror(fd, method, "400", "Bad Request",
                "TinyChat did not recognize the request");
  } else {
    if (strcasecmp(version, "HTTP/1.0")
        && strcasecmp(version, "HTTP/1.1")) {
      clienterror(fd, version, "501", "Not Implemented",
                  "TinyChat does not implement that version");
    } else if (strcasecmp(method, "GET")
               && strcasecmp(method, "POST")) {
      clienterror(fd, method, "501", "Not Implemented",
                  "TinyChat does not implement that method");
    } else {
      headers = read_requesthdrs(&rio);

      /* Parse all query arguments into a dictionary */
      query = make_dictionary(COMPARE_CASE_SENS, free);
      parse_uriquery(uri, query);
      if (!strcasecmp(method, "GET")){
        printf("In GET\n");
        if(starts_with("/say?", uri)){
          printf("In say\n");
          if(appendToConv(query)){
            if(serveConv(fd, query) != 1){
              clienterror(fd, method, "400", "Bad Say Request", "User, Topic, Content Does Not Exist");
            }
          }
          else{
            clienterror(fd, method, "400", "Bad Say Request", "User, Topic, Content Does Not Exist");
          }
        }
        else if(starts_with("/conversation?", uri)){
          printf("In conversation");
          if(serveConv(fd, query) != 1){
            clienterror(fd, method, "400", "Bad Conversation Request", "User, Topic, Content Does Not Exist");
          }
        }
        else if(starts_with("/import?", uri)){
          printf("In import");
          if(serveImport(query) != 1){
            clienterror(fd, method, "400", "Bad Import Request", "User, Topic, Content Does Not Exist");
          }
          else{
            serveConv(fd, query);
          }
        }
        else{
          printf("In empty");
          serve_form(fd, "Welcome to TinyChat");
        }

      }
      else if(!strcasecmp(method, "POST")){
        printf("In POST");
        read_postquery(&rio, headers, query);

        if(appendToConv(query)){
          serveTopic(fd, query);
        }
        else{
          clienterror(fd, method, "400", "Bad POST Request", "Name, Topic, Content Does Not Exist");
        }
      }


      /* For debugging, print the dictionary */
      print_stringdictionary(query);

      /* Clean up */
      free_dictionary(query);
      free_dictionary(headers);
    }

    /* Clean up status line */
    free(method);
    free(uri);
    free(version);
  }
  Close(fd);
  return NULL;
}

/*
 * read_requesthdrs - read HTTP request headers
 */
dictionary_t *read_requesthdrs(rio_t *rp) 
{
  char buf[MAXLINE];
  dictionary_t *d = make_dictionary(COMPARE_CASE_INSENS, free);

  Rio_readlineb(rp, buf, MAXLINE);
  printf("%s", buf);
  while(strcmp(buf, "\r\n")) {
    Rio_readlineb(rp, buf, MAXLINE);
    printf("%s", buf);
    parse_header_line(buf, d);
  }
  
  return d;
}

void read_postquery(rio_t *rp, dictionary_t *headers, dictionary_t *dest)
{
  char *len_str, *type, *buffer;
  int len;
  
  len_str = dictionary_get(headers, "Content-Length");
  len = (len_str ? atoi(len_str) : 0);

  type = dictionary_get(headers, "Content-Type");
  
  buffer = malloc(len+1);
  Rio_readnb(rp, buffer, len);
  buffer[len] = 0;

  if (!strcasecmp(type, "application/x-www-form-urlencoded")) {
    parse_query(buffer, dest);
  }

  free(buffer);
}

static char *ok_header(size_t len, const char *content_type) {
  char *len_str, *header;
  
  header = append_strings("HTTP/1.0 200 OK\r\n",
                          "Server: TinyChat Web Server\r\n",
                          "Connection: close\r\n",
                          "Content-length: ", len_str = to_string(len), "\r\n",
                          "Content-type: ", content_type, "\r\n\r\n",
                          NULL);
  free(len_str);

  return header;
}

/*
 * serve_form - sends a form to a client
 */
void serve_form(int fd, const char *pre_content)
{
  size_t len;
  char *body, *header;
  
  body = append_strings("<html><body>\r\n",
                        "<p>Welcome to TinyChat</p>",
                        "\r\n<form action=\"reply\" method=\"post\"",
                        " enctype=\"application/x-www-form-urlencoded\"",
                        " accept-charset=\"UTF-8\">\r\n",
                        "<br>User: <input type=\"text\" name=\"user\">\r\n",
                        "<br>Topic: <input type=\"text\" name=\"topic\">\r\n",
                        "<br><input type=\"submit\" value=\"Join Conversation\">\r\n",
                        "<input type=\"hidden\" name=\"content\" value=\"\">\r\n",
                        "</form></body></html>\r\n",
                        NULL);
  
  len = strlen(body);

  /* Send response headers to client */
  header = ok_header(len, "text/html; charset=utf-8");
  Rio_writen(fd, header, strlen(header));
  printf("Response headers:\n");
  printf("%s", header);

  free(header);

  /* Send response body to client */
  Rio_writen(fd, body, len);

  free(body);
}

/*
 * clienterror - returns an error message to the client
 */
void clienterror(int fd, char *cause, char *errnum, 
		 char *shortmsg, char *longmsg) 
{
  size_t len;
  char *header, *body, *len_str;

  body = append_strings("<html><title>Tiny Error</title>",
                        "<body bgcolor=""ffffff"">\r\n",
                        errnum, " ", shortmsg,
                        "<p>", longmsg, ": ", cause,
                        "<hr><em>The Tiny Web server</em>\r\n",
                        NULL);
  len = strlen(body);

  /* Print the HTTP response */
  header = append_strings("HTTP/1.0 ", errnum, " ", shortmsg,
                          "Content-type: text/html; charset=utf-8\r\n",
                          "Content-length: ", len_str = to_string(len), "\r\n\r\n",
                          NULL);
  free(len_str);
  
  Rio_writen(fd, header, strlen(header));
  Rio_writen(fd, body, len);

  free(header);
  free(body);
}

static void print_stringdictionary(dictionary_t *d)
{
  int i, count;

  count = dictionary_count(d);
  for (i = 0; i < count; i++) {
    printf("%s=%s\n",
           dictionary_key(d, i),
           (const char *)dictionary_value(d, i));
  }
  printf("\n");
}

static int appendToConv(dictionary_t *d){
  printf("In appendToConv\n");
  char *content = dictionary_get(d, "content");
  char *topic = dictionary_get(d, "topic");
  char *user = dictionary_get(d, "user");

  if(content != NULL && topic != NULL && user != NULL){

    if(strcasecmp(content, "")){
      printf("In appendToConv : locking line 322\n");
      pthread_mutex_lock(&lock);
      char *convoTopic = dictionary_get(convos, topic);
      if(convoTopic == NULL){
        dictionary_set(convos, topic, append_strings(user, ": ", content, "\r\n", NULL));
      }
      else{
        dictionary_set(convos, topic, append_strings(convoTopic, user, ": ", content, "\r\n", NULL));
      }

      pthread_mutex_unlock(&lock);
      printf("In appendToConv : unlocking line 334\n");
    }
    return 1;
  }

  return 0;
}

static void serveTopic(int fd, dictionary_t *query){

  printf("In serveTopic\n");
  printf("In serveTopic : locking line 342\n");
  pthread_mutex_lock(&lock);

  char *user = dictionary_get(query, "user");
  char *topic = dictionary_get(query, "topic");

  if(user != NULL && topic != NULL){
    size_t len;
    char *body, *header;

    body = append_strings("<html><body>\r\n",
                        "<br>TinyChat - ",topic,
                        "\r\n<form action=\"reply\" method=\"post\"",
                        " enctype=\"application/x-www-form-urlencoded\"",
                        " accept-charset=\"UTF-8\">\r\n<pre>",
                        ((dictionary_get(convos,topic) == NULL) ? "" : dictionary_get(convos,topic)),
                        "</pre><br>", user, ": ",
                        "<input type=\"text\" name=\"content\">\r\n",
                        "<br><input type=\"submit\" value=\"Send\">\r\n",
                        "<br><input type=\"hidden\" name=\"user\" value=\"",user,"\">\r\n",
                        "<br><input type=\"hidden\" name=\"topic\" value=\"",topic,"\">\r\n",
                        "</form></body></html>\r\n",
                        NULL);

    len = strlen(body);

    /* Send response headers to client */
    header = ok_header(len, "text/html; charset=utf-8");
    Rio_writen(fd, header, strlen(header));
    printf("Response headers:\n");
    printf("%s", header);

    free(header);

    /* Send response body to client */
    Rio_writen(fd, body, len);

    free(body);
  }
  else{
    clienterror(fd, "ERROR", "400", "Bad Request", "Name, Topic Does Not Exist");
  }

  pthread_mutex_unlock(&lock);
  printf("In serveTopic : unlocking line 389\n");
}

static int serveConv(int fd, dictionary_t *query){

  printf("In serveConv\n");
  printf("In serveConv : locking line 391\n");
  pthread_mutex_lock(&lock);

  size_t len;

  if(dictionary_get(query,"topic") != NULL){
    printf("In serveConv - before char\n");
    char * body = (dictionary_get(convos, dictionary_get(query, "topic")) == NULL) ? "" : dictionary_get(convos, dictionary_get(query, "topic"));
    printf("In serveConv - after char\n");

    len = strlen(body);

    char *header = ok_header(len, "text/plain;charset=utf-8");

    Rio_writen(fd, header, strlen(header));

    free(header);

    Rio_writen(fd, body, len);
  }
  else{
    pthread_mutex_unlock(&lock);
    printf("In sevreConv : unlocking line 417\n");
    return 0;
  }

  pthread_mutex_unlock(&lock);
  printf("In serveConv : unlocking line 422\n");
  return 1;
}

static int serveImport(dictionary_t *query){
  int length;
  int server;

  rio_t rio;

  dictionary_t *serverHeaders;

  char *buff;

  char *topic = dictionary_get(query, "topic");
  char *host = dictionary_get(query, "host");
  char *port = dictionary_get(query, "port");

  if(topic != NULL && host != NULL && port != NULL){
    server = Open_clientfd(host, port);
    char *firstLine = append_strings("GET /conversation?topic=", query_encode(topic), " HTTP/1.0\r\n\r\n", NULL);
    Rio_writen(server, firstLine, strlen(firstLine));
    free(firstLine);
    buff = malloc(MAXLINE);
    Rio_readinitb(&rio, server);

    if(Rio_readlineb(&rio, buff, MAXLINE) <= 0 || !starts_with("HTTP/1.0 200 OK", buff)){
      Close(server);
      return 0;
    }

    serverHeaders = read_requesthdrs(&rio);

    if(serverHeaders != NULL && dictionary_get(serverHeaders, "content-length") != NULL){
      free(buff);
      length = atoi(dictionary_get(serverHeaders, "content-length"));
      buff = malloc(length+1);
      buff[length] = 0;
      Rio_readnb(&rio, buff, length);
      printf("In serveImport : locking line 455");
      pthread_mutex_lock(&lock);
      if(dictionary_get(convos, topic) == NULL){
        dictionary_set(convos, topic, buff);
      }
      else{
        dictionary_set(convos, topic, append_strings(dictionary_get(convos, topic), buff, NULL));
      }
      pthread_mutex_unlock(&lock);
      printf("In serveImport : unlocking line 470");
      free_dictionary(serverHeaders);
      Close(server);
      return 1;
    }
    else{
      free_dictionary(serverHeaders);
      Close(server);
      return 0;
    }
  }
  else{
    return 0;
  }

}
